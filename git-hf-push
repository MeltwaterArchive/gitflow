#
# HubFlow - a fork of the git-flow tools to apply Vincent Driessen's
# branching model to working with GitHub
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# The HubFlow documentation is found at:
#    http://datasift.github.com/gitflow/
#
# Feel free to contribute to this project at:
#    http://github.com/datasift/gitflow
#
# Copyright 2013 MediaSift Ltd. All rights reserved.
#
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

require_git_repo
require_hubflow_initialized
hubflow_load_settings

usage() {
    echo "usage: git hf push [-f]"
}

cmd_default() {
    cmd_push "$@"
}

cmd_help() {
    usage
    exit 0
}

parse_args() {
    # parse options
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"
}



# custom stuff
create_temp_version_hash() {
        if [ "$VERSION" == "" ]; then
           HASH=`date +%s | shasum | base64 | head -c 6 ; echo`
           REPODIR=`git rev-parse --show-toplevel`
           #also update branch
           BRANCH=$PREFIX$HASH
           echo "creating version arg: $HASH"
           echo $HASH > $REPODIR/version_hash.txt
        fi
}

update_version_hash() {
        #get current version hash
        get_version_hash
        if [ "$LATESTVERSION" == "" ]; then
           die "fatal: cannot find latest version number"
        fi
        #bumping the hotfix
        set_version_hash
}

get_version_hash() {
        #REPONAME=`git rev-parse --show-toplevel |grep -oE "[^/]+$"| head -n 1`
        REPODIR=`git rev-parse --show-toplevel`
        if [ ! -f $REPODIR/version_latest.txt ]; then
            LATESTHASH=`date +%s | shasm | base64 | head -c 6 ; echo`
        else
        HASH=`cat $REPODIR/version_hash.txt`
        fi
}


increment_version ()
{
  declare -a part=( ${1//\./ } )
  declare    new
  declare -i carry=1

  for (( CNTR=${#part[@]}-1; CNTR>=0; CNTR-=1 )); do
    len=${#part[CNTR]}
    new=$((part[CNTR]+carry))
    [ ${#new} -gt $len ] && carry=1 || carry=0
    [ $CNTR -gt 0 ] && part[CNTR]=${new: -len} || part[CNTR]=${new}
  done
  new="${part[*]}"
  echo "${new// /.}"
} 


set_version_hash() {
        HASH=`echo $LATESTHASH | awk -F. '/[0-9]+\./{$2+=1;OFS=".";print}'`
        #update last num to 0
        HASH=`echo $HASH | awk -F. '/[0-9]+\./{$NF=0;OFS=".";print}'`
        #now, set and ensure that it worked
        REPODIR=`git rev-parse --show-toplevel`
        echo $HASH > $REPODIR/version_hash.txt
        #ensure that it happend
        get_version_hash
        if [ "$VERSION" != "$LATESTHASH" ]; then
           die "Could not ensure version numbering."
        fi
}



set_version_number() {
        REPODIR=`git rev-parse --show-toplevel`
        if [ -e $REPODIR/version_latest.txt ]; then
            LATESTVERSION=`cat $REPODIR/version_latest.txt`
        fi
        
        if [ -z "$LATESTVERSION" ]; then
            REPOURL=`git config --get remote.origin.url`
            LATESTVERSION=`git ls-remote --tags $REPOURL | tail -n 2|head -n 1|grep -oE "[^/tags/v]+$"`
        fi  

        if [ -z "$VERSION" ]
        then
            LATESTVERSION="0.0.1"
        fi

        VERSION=`increment_version $LATESTVERSION`
        echo $VERSION > $REPODIR/version_latest.txt
}

# done custom stuff


cmd_push() {
    DEFINE_boolean force false "Forces a destructive push using the --force/-f flag" F
    parse_args "$@"

    # make sure we're okay to start
    require_clean_working_tree

    # fetch and merge the latest changes from origin
    hubflow_fetch_latest_changes_from_origin
    hubflow_remote_merge_helper "$ORIGIN" "$BRANCH"

    # push to origin
    if flag force ; then
        hubflow_push_latest_changes_to_origin force
    else
        hubflow_push_latest_changes_to_origin
    fi
    local result=$?

    #set_version_number

    # what happened?
    echo
    echo "Summary of actions:"
    #echo "- Version number was bumped to $VERSION"

    if [[ $result -eq 1 ]] ; then
        echo "- A new remote branch '$ORIGIN/$BRANCH' was created"
        echo "- The local branch '$BRANCH' was configured to track the remote branch"
    elif [[ $result -eq 2 ]] ; then
        echo "- The remote branch '$ORIGIN/$BRANCH' was overwritten with your changes"
    elif [[ $result -eq 3 ]] ; then
        echo "- The remote branch '$ORIGIN/$BRANCH' was updated with your changes"
    else
        echo "- No action taken, '$ORIGIN/$BRANCH' already up-to-date"
    fi

    # all done
}
